Call
Apply
Bind
/// Apply-- write into Array[]
!!!!!!!!!!!!!!!!
Call method

let name={
  firstname:"Rajat",
  lastname:'Shah',
  printFullName: function(){
    console.log(this.firstname + ' ' + this.lastname)
  }
}
name.printFullName()
  //we have another object name2
   //funciton borrowing. for that we use call, apply and bind.
//Instead of writing 2times we will write once printFullName
let name2={
    firstname:"Riya",
    lastname:'Sheth',
   
}
name.printFullName.call(name2)
<Rajat Shah
<Riya Sheth

????????????????????????????????????????????
let name={
  firstname:"Rajat",
  lastname:'Shah',
  
}
// name.printFullName()
//   //we have another object name2
//    //funciton borrowing. for that we use call, apply and bind. Instead of writing 2times we will write once printFullName
let name2={
    firstname:"Riya",
    lastname:'Sheth',
    printFullName: function(){
      console.log(this.firstname + ' ' + this.lastname)
    }
   
}
//call in js
name2.printFullName()
name2.printFullName.call(name)
<Riya Sheth
<Rajat Shah

???????????????????????????????

let name={
  firstname:"Rajat",
  lastname:'Shah',
  
}
// name.printFullName()
//   //we have another object name2
//    //funciton borrowing. for that we use call, apply and bind. Instead of writing 2times we will write once printFullName
let name2={
    firstname:"Riya",
    lastname:'Sheth',
    printFullName: function(city){
      console.log(this.firstname + ' ' + this.lastname + "from : " + city)
    }
   
}
//call in js
name2.printFullName("Pune")
name2.printFullName.call(name, "Mumbai")


< Riya Shethfrom : Pune
< Rajat Shahfrom : Mumbai

 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Apply method --> apply also work the same but only difference is we will pass the arguments inside parameters in array []

name2.printFullName.call(name, "Mumbai") -- in call
name2.printFullName.apply(name, ["Mumbai"]) -- in apply


let name={
  firstname:"Rajat",
  lastname:'Shah',
  
}

let name2={
    firstname:"Riya",
    lastname:'Sheth',
    printFullName: function(city){
      console.log(this.firstname + ' ' + this.lastname + "from : " + city)
    }
   
}
//call in js
name2.printFullName("Pune")
name2.printFullName.apply(name, ["Mumbai"])

< Riya Shethfrom : Pune
< Rajat Shahfrom : Mumbai


!!!!!!!!!!!!!!!!
//in call and apply printFullName is inside object but in bind outside the object
//bind method in js

let name={
  firstname:"Rajat",
  lastname:'Shah',
  
}

let name2={
    firstname:"Riya",
    lastname:'Sheth',  
}

function printFullName(city){
  console.log(this.firstname + ' ' + this.lastname + "from : " + city)
}

let printName = printFullName.bind(name2, 'Mumbai')
console.log(printName)
let printMyName = printFullName.bind(name, "Pune")
printName()
printMyName()

<Æ’ printFullName(city){
  console.log(this.firstname + ' ' + this.lastname + "from : " + city)
}
<Riya Shethfrom : Mumbai
<Rajat Shahfrom : Pune

!!!!!!!!!!!!!!!!!!!!!!!!!!11111
Debouncing
for every serach on amazon api call. database saw fetch ho kar aatey hai
every letter you type there is api calling. We don't any api calling whenever we type any letter. 
For pink shoes so many api calling can make your website slow. In pink shoes 7 times api calling 
not good so maximum time 1-2 times api calling good. So you want to restrict the maximum time of api calling

For debouncing
we have to create two files html file and js file

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
</head>
<body>
 
  <input type="text" onkeypress="fetchData()">
  <script src="main.js"></script>
</body>
</html>

js file

function fetchData(){
  console.log('Making api cal...')
} 


<in input type anything coming on console 17 times Making api cal...
 <if i write in input box Pink shoes so api call 10times Making api cal... so on that case two times api call we want
check 1st september class 
 
