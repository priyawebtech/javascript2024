Topic : Functions, arrow function, callback, map, 
instead of for loop we can also use map

// //defined a funciton
function myfunction(){
  console.log("Hare Rama");
}
myfunction()
<Hare Rama

!!!!!!!!!!!!!!!!!!!!!!!

function print(){
 
console.log('Good morning!')
 }

//calling the funciton
print(); 
<Good morning!

????????????????????????????
function printFullName(){


}
function add(){
  console.log(22+5)
}

add();
<27 this is hard coding not recommend to write down like this
!!!!!!!!!!!!!!!!!!!!!

function add(a,b){
  console.log(a+b);
}
add(1,6)
,6
??????????????????
function printFullName(){


}
function add(a,b){
  console.log(a+b)
}

//a,b
add();

Re: NaN (Not a number)
???????????????????
function printFullName(){


}
function add(a,b){
  console.log(a+b)
}

//a,b
add(5,6);
RE: 11
???????????????

function printFullName(){


}
function add(a,b){
  console.log(a+b)
}

//a,b
add(5,6);
add(66,8)

Re:74
?????????????????????????
function printFullName(){


}
function add(a,b){
  console.log("addition of " + a + "+" + b + "=")
  console.log(a+b)
}

//a,b-- parameter, arguments
add(5,6);
add(66,8)

Re: addition of 5+6=
main.js:15 11
main.js:14 addition of 66+8=
main.js:15 74

??????????????????????
function printFullName(){


}
function add(a,b){
  console.log("addition of " + a + "+" + b + "=")
  console.log(a+b)
}

!!!!!!!!!!!!!!!!!!!!!!!
function multiply(a,b){
  return a * b;
}
let answer = multiply(3,4);
console.log(answer);
<12
!!!!!!!!!!!!!!!!!!!!!!!!!11
function printFullName(fname, lname){
  console.log(fname + " " +lname)
}
printFullName("Priya", "Thakur");
<Priya Thakur

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!11
function multiply(num1,num2){
  return num1*num2
}
//a,b-- parameter, arguments
add(5,6);
add(66,8)
let answer=multiply(5,7)
console.log(answer)
console.log(multiply(9,7))

Re: addition of 5+6=
main.js:15 11
main.js:14 addition of 66+8=
main.js:15 74
main.js:25 35
main.js:26 63

??????????????


function printFullName(fname, lname){
  console.log(fname+" "+ lname)
}
printFullName('Priya', 'Thakur' )

??????????????????

//calc avg marks
function printFullName(fname, mlname, lname){
  console.log(fname + " " + mlname +" " + lname)
}
printFullName('Priya', 'Ram' , 'Thakur' )

Re: Priya Ram Thakur

?????????????

function calcAvgMarks(...marks){
  console.log(marks)
}
calcAvgMarks(60,55,80)
calcAvgMarks(60,70,55,88)

Re: (3) [60, 55, 80]
main.js:36 (4) [60, 70, 55, 88]

?????????????????

//normal function
const myfunc= function(a,b){
  console.log(a,b)
}
myfunc(4,5)

Re: 4 5
﻿??????????????????
//arrow functions -> anonymous functions

()=> statement

(parameters)=>statement

()=>{
  //statements
}

(para1,para2)=>{
  //statemenets
}
!!!!!!!!!!!!!!!!!!!!!!!!!!!11

callback
function(function)
check you js notebook and video
!!!!!!!!!!!!!!!!!!!!!!!!!111
Arrow functions were introduced in ES6.

Arrow functions allow us to write shorter function syntax:
arrow function by harry revisited
//arrow function
// We can write in two ways
const sayHello = ()=>{
  console.log("Hello");
}
sayHello()
< Hello

!!!!!!!!!!!!!!!!!!!!!!111111
//we can write like this also simply remove bracket {}
const sayHello = () => console.log("Hello");


sayHello()
< Hello
!!!!!!!!!!!!!!!!!!!!1111111
//if we give some variable 
const sayHello = (name) => console.log("Hello " + name);


sayHello("Priya");
< Hello Priya

//we can remove parenthesisi bracket also (name) remove bracket name 
const sayHello = name => console.log("Hello " + name);


sayHello("Priya");

//// if we are using two varble together we need to use bracket prathesis we can't remove otherwise going to give error
const sayHello = (name, greeting ) => console.log(greeting + " " + name);


sayHello("Priya", "Good afternoon");
<Good afternoon Priya

!!!!!!!!!!!!!!!!!!!!11
const x = {
  name: "priya",
  role:"Js Developer",
  exp:30,
}
console.log(x.name, x.exp);
< priya 30
!!!!!!!!!!!!!11111
//show is keyword function we can write another function inside of it. this is also a keyowrd. Refer to this x.
const x = {
  name: "priya",
  role:"Js Developer",
  exp:30,
  show: function() {
    console.log(`The name is ${this.name}`)
  }
}
x.show();

??????????????????????????????
const x = {
  name: "priya",
  role:"Js Developer",
  exp:30,
  show: function() {
    console.log(`The name is ${this.name}\nThe role is ${this.role}`)
  }
}
x.show();
<The name is priya
The role is Js Developer


????????????????????????
//settime out we can set
const x = {
  name: "priya",
  role:"Js Developer",
  exp:30,
  show: function() {
    
    setTimeout(() => {
      console.log(`The name is ${this.name}\nThe role is ${this.role}`)
    }, 2000)
  }
}
x.show();
< It will execute after 2 seconds .
The name is priya
The role is Js Developer
﻿
????????????????????
//we can remove (name) paranthesis name

const sayHello = name => {
  console.log("greeting" + " " + name)
  console.log("Hi")
}
sayHello("Priya", "Good afternoon");
<greeting Priya
main.js:5 Hi

!!!!!!!!!!!!!!!!!!!!!!!!!!!
use of this keyoword
const person = {
  firstName: "John",
  lastName: "Doe",
  id: 5566,
  fullName : function() {
    return this.firstName + " " + this.lastName;
  }
};
let winterSnow = person.fullName();
console.log(winterSnow)

<John Doe

// we can write like this also 
const person = {
  firstName: "John",
  lastName: "Doe",
  id: 5566,
  fullName : function() {
    console.log(this.firstName + " " + this.lastName) ;
  }
}
person.fullName();

???????????????????

const person ={
  firstName: "Priya",
  lastName: "Thakur",
  working: "Full stackweb developer",
  fullName : function(){
    console.log(this.firstName + " " + this.lastName)
  }
}
person.fullName();
< Priya Thakur

!!!!!!!!!!!!!!!!!!!!!!!!!!
//Javascript callback
A callback is a function passed as an argument to another function.


"I will call back later!"

A callback is a function passed as an argument to another function

This technique allows a function to call another function

A callback function can run after another function has finished
